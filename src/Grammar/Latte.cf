-- programs ------------------------------------------------
entrypoints Program ;
Program.    Program ::= [TopDef] ;
FnDef.	    TopDef ::= Type Ident "(" [Arg] ")" Block ;
ClsDef.     TopDef ::= "class" Ident ClsBlock ;
separator   nonempty TopDef "" ;
Arg. 	    Arg ::= Type Ident ;
separator   Arg "," ;

-- statements ----------------------------------------------
Block.     Block ::= "{" [Stmt] "}" ;
separator  Stmt "" ;
SEmpty.    Stmt ::= ";" ;
SBStmt.    Stmt ::= Block ;
SDecl.     Stmt ::= Type [Item] ";" ;
SNoInit.   Item ::= Ident ; 
SInit.     Item ::= Ident "=" Expr ;
separator  nonempty Item "," ;
SAss.      Stmt ::= Expr6 "=" Expr ";" ;
SIncr.     Stmt ::= Expr6 "++"  ";" ;
SDecr.     Stmt ::= Expr6 "--"  ";" ;
SRet.      Stmt ::= "return" Expr ";" ;
SVRet.     Stmt ::= "return" ";" ;
SCond.     Stmt ::= "if" "(" Expr ")" Stmt  ;
SCondElse. Stmt ::= "if" "(" Expr ")" Stmt "else" Stmt  ;
SWhile.    Stmt ::= "while" "(" Expr ")" Stmt ;
SFor.      Stmt ::= "for" "(" Type Ident ":" Expr ")" Stmt ;
SExp.      Stmt ::= Expr  ";" ;

-- classes -------------------------------------------------
ClsBlock.  ClsBlock ::= "{" [ClsDef] "}";
ClsFldDef. ClsDef ::= Type Ident ";" ;
-- TODO: ClsFnDef.  ClsDef ::= Type Ident "(" [Arg] ")" Block ;
separator  ClsDef "" ;

-- types ---------------------------------------------------
TInt.         Type ::= "int" ;
TStr.         Type ::= "string" ;
TBool.        Type ::= "boolean" ;
TVoid.        Type ::= "void" ;
TArr.         Type ::= Type "[]" ;
TCls.         Type ::= Ident ;
internal Fun. Type ::= Type "(" [Type] ")" ;
separator     Type "," ;

-- expressions ---------------------------------------------
EVar.      Expr6 ::= Ident ;
ELitInt.   Expr6 ::= Integer ;
ELitTrue.  Expr6 ::= "true" ;
ELitFalse. Expr6 ::= "false" ;
EApp.      Expr6 ::= Ident "(" [Expr] ")" ;
EString.   Expr6 ::= String ;

EAccFld.   Expr6 ::= Expr6 "." Ident ;
ENewCls.   Expr6 ::= "new" Type ;
ENullCls.  Expr6 ::= "(" Ident ")" "null" ;
EArrGet.   Expr6 ::= Expr6 "[" Expr "]" ;
ENewArr.   Expr6 ::= "new" Type "[" Expr "]" ;

ENeg.      Expr5 ::= "-" Expr6 ;
ENot.      Expr5 ::= "!" Expr6 ;
EMul.      Expr4 ::= Expr4 MulOp Expr5 ;
EAdd.      Expr3 ::= Expr3 AddOp Expr4 ;
ERel.      Expr2 ::= Expr2 RelOp Expr3 ;
EAnd.      Expr1 ::= Expr2 "&&" Expr1 ;
EOr.       Expr ::= Expr1 "||" Expr ;
coercions  Expr 6 ;
separator  Expr "," ;

-- operators -----------------------------------------------
Plus.      AddOp ::= "+" ;
Minus.     AddOp ::= "-" ;
Times.     MulOp ::= "*" ;
Div.       MulOp ::= "/" ;
Mod.       MulOp ::= "%" ;
LTH.       RelOp ::= "<" ;
LE.        RelOp ::= "<=" ;
GTH.       RelOp ::= ">" ;
GE.        RelOp ::= ">=" ;
EQU.       RelOp ::= "==" ;
NE.        RelOp ::= "!=" ;

-- comments ------------------------------------------------
comment    "#" ;
comment    "//" ;
comment    "/*" "*/" ;
